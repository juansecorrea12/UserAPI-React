{"version":3,"sources":["components/formulario.jsx","components/EditForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","props","addUser","event","preventDefault","console","log","options","method","headers","body","JSON","stringify","state","newUser","fetch","url","then","response","json","result","listUser","catch","error","handleInput","setState","target","name","value","className","onInput","this","onSubmit","htmlFor","placeholder","type","id","required","Component","EditForm","user","lastname","email","password","handleInputEdit","updateUser","App","getList","users","data","deleteUser","index","showUsers","map","key","onClick","setUser","changeShow","show","userEdited","urlPUT","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8a8c9f92.chunk.js","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\n\nexport default class Formulario extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newUser: {},\n    };\n  }\n\n  addUser = (event) => {\n    event.preventDefault();\n    console.log(\"se ha creado un nuevo usuario\");\n\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n      body: JSON.stringify(this.state.newUser),\n    };\n\n    fetch(this.props.url, options)\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result);\n        this.props.listUser();\n        // console.log(\"aqui elimina ----------\");\n        // this.clearSpaces();\n      })\n      .then((result) => console.log(result))\n      .catch((error) => console.log(error));\n  };\n\n  // clearSpaces = (event) => {\n  //   event.target.value = \"\";\n  // };\n\n  handleInput = (event) => {\n    this.setState({\n      newUser: {\n        ...this.state.newUser,\n        [event.target.name]: event.target.value,\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"formulario\">\n        <form onInput={this.handleInput} onSubmit={this.addUser}>\n          <h2>Agrega un usuario</h2>\n          <p>\n            <label htmlFor=\"name\">Nombre</label>\n            <input\n              className=\"b-bottom\"\n              placeholder=\"Escribe un nombre\"\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              required\n            />\n          </p>\n          <p>\n            <label htmlFor=\"lastName\">Apellido</label>\n            <input\n              className=\"b-bottom\"\n              placeholder=\"Escribe un apellido\"\n              type=\"text\"\n              name=\"lastname\"\n              id=\"lastName\"\n              required\n            />\n          </p>\n          <p>\n            <label htmlFor=\"email\">Email</label>\n            <input\n              className=\"b-bottom\"\n              placeholder=\"Escribe un email\"\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              required\n            />\n          </p>\n          <p>\n            <label htmlFor=\"contrasena\">Contrase単a</label>\n            <input\n              className=\"b-bottom\"\n              placeholder=\"Escribe una contrase単a\"\n              type=\"password\"\n              name=\"password\"\n              id=\"contrasena\"\n              required\n            />\n          </p>\n          {/* <input type=\"submit\" value=\"Agregar Ususario\" /> */}\n          <button type=\"submit\" className=\"btn\">\n            Agregar Usuario\n            <i className=\"fas fa-long-arrow-alt-right\"></i>\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function EditForm(props) {\n  const { name, lastname, email, password } = props.user;\n\n  return (\n    <div className=\"formulario\">\n      <form onInput={props.handleInputEdit} onSubmit={props.updateUser}>\n        <h2>Edita un usuario</h2>\n        <p>\n          <label htmlFor=\"name\">Nombre</label>\n          <input\n            className=\"b-bottom\"\n            placeholder=\"Escribe un nombre\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            required\n          />\n        </p>\n        <p>\n          <label htmlFor=\"lastName\">Apellido</label>\n          <input\n            className=\"b-bottom\"\n            placeholder=\"Escribe un apellido\"\n            type=\"text\"\n            name=\"lastname\"\n            value={lastname}\n            required\n          />\n        </p>\n        <p>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            className=\"b-bottom\"\n            placeholder=\"Escribe un email\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            required\n          />\n        </p>\n        <p>\n          <label htmlFor=\"contrasena\">Contrase単a</label>\n          <input\n            className=\"b-bottom\"\n            placeholder=\"Escribe una contrase単a\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            required\n          />\n        </p>\n        {/* <input type=\"submit\" value=\"Agregar Ususario\" /> */}\n        <button type=\"submit\" className=\"btn\">\n          Editar Usuario\n          <i className=\"fas fa-long-arrow-alt-right\"></i>\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Formulario from \"./components/formulario.jsx\";\nimport EditForm from \"./components/EditForm.jsx\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      userEdited: { name: \"\", lastname: \"\", email: \"\", password: \"\" },\n      url: \"https://academlo-api-users.herokuapp.com/users\",\n      show: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  getList = () => {\n    fetch(this.state.url)\n      .then((response) => response.json())\n      .then((result) => this.setState({ users: result.data }))\n      .catch((error) => console.log(error));\n  };\n\n  deleteUser = (index) => {\n    const optionsDelete = {\n      method: \"DELETE\",\n    };\n\n    // Elimina\n    const urlDinamica =\n      \"https://academlo-api-users.herokuapp.com/user/\" + index;\n\n    fetch(urlDinamica, optionsDelete)\n      .then((response) => {\n        response.json();\n      })\n      .then((result) => {\n        console.log(result);\n        // Actualiza cuando tiene el resultado\n        this.getList();\n      });\n  };\n\n  showUsers = () => {\n    return this.state.users.map((user, index) => {\n      return (\n        <div className=\"card col-4\" key={index}>\n          <div className=\"header-user\">\n            <h4>{user.name}</h4>\n            <button\n              onClick={() => {\n                this.setUser(user);\n              }}\n            >\n              <i className=\"fas fa-user-edit\"></i>\n            </button>\n          </div>\n          <span>{user.email}</span>\n          <button\n            className=\"btn-delete\"\n            onClick={() => {\n              this.deleteUser(user.id);\n            }}\n          >\n            Eliminar Usuario\n          </button>\n        </div>\n      );\n    });\n  };\n\n  changeShow = () => {\n    this.setState({\n      show: !this.state.show,\n    });\n  };\n\n  updateUser = (event) => {\n    event.preventDefault();\n\n    const options = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n      body: JSON.stringify(this.state.userEdited),\n    };\n\n    const urlPUT =\n      \"https://academlo-api-users.herokuapp.com/user/\" +\n      this.state.userEdited.id;\n\n    fetch(urlPUT, options)\n      .then((response) => response.json())\n      .then((result) => this.getList())\n      .catch((error) => console.log(error));\n  };\n\n  setUser = (user) => {\n    this.setState({\n      userEdited: user,\n    });\n    this.changeShow();\n  };\n\n  handleInputEdit = (event) => {\n    this.setState({\n      userEdited: {\n        ...this.state.userEdited,\n        [event.target.name]: event.target.value,\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.state.show ? (\n          <Formulario url={this.state.url} listUser={this.getList} />\n        ) : (\n          <EditForm\n            user={this.state.userEdited}\n            handleInputEdit={this.handleInputEdit}\n            updateUser={this.updateUser}\n          />\n        )}\n        <hr className=\"line-between\"></hr>\n        <div className=\"tablas\">\n          <div className=\"headerContent\">\n            <h1>Usuarios del sistema</h1>\n          </div>\n          <div className=\"cards\">{this.showUsers()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}